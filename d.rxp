type Clock = {{
  int32_t hour_hand,
  int32_t minute_hand
}}

signal Clock sig_clock;
signal GColor8 sig_color;

function int32_t get_hour_hand_angle() {{
  time_t t = time(NULL);
  struct tm *tick_time = localtime(&t);
  return tick_time->tm_hour * TRIG_MAX_ANGLE / 12 + tick_time->tm_min * TRIG_MAX_ANGLE / 60 / 12;
}}

function int32_t get_minute_hand_angle() {{
  time_t t = time(NULL);
  struct tm *tick_time = localtime(&t);
  return tick_time->tm_min * TRIG_MAX_ANGLE / 60;
}}

stage {{
  intro {{
    ease_in_out for 500ms {{
      sig_clock from (Clock) { .hour_hand = 0, .minute_hand = 0 };
                to (Clock) { .hour_hand = get_hour_hand_angle(), .minute_hand = get_minute_hand_angle() };
    }}
  }}
  forever {{
    sig_color = GColorBlue;
    sig_clock = (Clock) { .hour_hand = get_hour_hand_angle(), .minute_hand = get_minute_hand_angle() };
  }}
}}

layer clock_layer = (ctx) => {{
  GRect bounds = grect_inset(layer_get_bounds(layer), GEdgeInsets(-10));
  graphics_context_set_fill_color(ctx, GColorWhite);
  graphics_fill_rect(ctx, bounds, 0, GCornerNone);
  GPoint center = GPoint(bounds.origin.x + bounds.size.w / 2, bounds.origin.y + bounds.size.h / 2);
  graphics_context_set_fill_color(ctx, GColorGreen);
  graphics_fill_radial(ctx, bounds, GOvalScaleModeFitCircle, 50, 0, sig_clock.hour_hand);
  graphics_context_set_fill_color(ctx, GColorBlue);
  graphics_fill_radial(ctx, bounds, GOvalScaleModeFitCircle, 25, 0, sig_clock.minute_hand);
}}
